% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/st_ytd_metrics.R
\name{st_ytd_metrics}
\alias{st_ytd_metrics}
\title{Fetch Year-to-Date Metrics for Apps or Publishers}
\usage{
st_ytd_metrics(
  os,
  unified_app_id = NULL,
  ios_app_id = NULL,
  android_app_id = NULL,
  publisher_id = NULL,
  years = NULL,
  end_dates = NULL,
  period_start = NULL,
  period_end = NULL,
  metrics = c("revenue", "downloads"),
  countries,
  cache_dir = NULL,
  auth_token = Sys.getenv("SENSORTOWER_AUTH_TOKEN"),
  verbose = TRUE
)
}
\arguments{
\item{os}{Character. Required. Operating system: "ios", "android", or "unified".
This determines which platform's data is returned.}

\item{unified_app_id}{Character vector. Sensor Tower unified app ID(s). 
Must be 24-character hex format (e.g., "5ba4585f539ce75b97db6bcb").}

\item{ios_app_id}{Character vector. iOS app ID(s) (e.g., "1234567890").}

\item{android_app_id}{Character vector. Android package name(s) (e.g., "com.example.app").}

\item{publisher_id}{Character vector. Publisher ID(s) (alternative to app IDs).}

\item{years}{Integer vector. **Deprecated** - use `end_dates` instead. Years to fetch data for.}

\item{end_dates}{Date vector or character vector. End dates for each period to fetch.
Each date will fetch data from period_start (or Jan 1) of that year to the specified date.
Can be Date objects or strings in "YYYY-MM-DD" format.}

\item{period_start}{Character string. Start date in "MM-DD" format (e.g., "02-01" for Feb 1).
If NULL, defaults to "01-01" (January 1).}

\item{period_end}{Character string. End date in "MM-DD" format (e.g., "02-28").
If NULL, defaults to last completed week (ending Saturday) of current year.}

\item{metrics}{Character vector. Metrics to fetch. Supports "revenue", "downloads", "dau", "wau", and "mau".
Default is both revenue and downloads. Note: DAU/WAU/MAU are calculated as averages for fair YoY comparisons.}

\item{countries}{Character vector. Country codes (e.g., "US", "GB", "JP"). Required.}

\item{cache_dir}{Character. Directory for caching API responses (optional).}

\item{auth_token}{Character string. Sensor Tower API token.}

\item{verbose}{Logical. Print progress messages.}
}
\value{
A tibble in tidy/long format with columns:
  - `app_id`: The app ID used for fetching data
  - `app_id_type`: Type of app ID ("ios", "android", or "unified")
  - `entity_id`: App or publisher ID
  - `entity_name`: App or publisher name
  - `entity_type`: "app" or "publisher"
  - `year`: Year of the data
  - `date_start`: Start date of the period
  - `date_end`: End date of the period
  - `country`: Country code
  - `metric`: The metric name (e.g., "revenue", "downloads", "dau")
  - `value`: Metric value (units depend on metric type)
}
\description{
Fetches year-to-date metrics for apps or publishers across multiple years,
with intelligent batching and caching to minimize API calls. The OS parameter
controls which platform's data is returned.
}
\details{
This function intelligently handles various scenarios:

- **Default behavior**: Fetches YTD through last completed week (Saturday)
- **Custom periods**: Apply same calendar period to all specified years
- **Leap years**: Automatically handled (e.g., Feb 29 in leap years)
- **Entity detection**: Automatically determines if using app or publisher endpoints
- **Caching**: Reuses cached data for overlapping periods across years
- **Active Users Support**: DAU, WAU, and MAU are averaged across periods for meaningful comparisons
- **Unified ID with Active Users**: When unified_app_id is provided with active user metrics,
  the function automatically looks up platform-specific IDs (iOS/Android) since these
  metrics require platform-specific API endpoints
}
\examples{
\dontrun{
# Get YTD metrics using end_dates (recommended)
ytd_metrics <- st_ytd_metrics(
  os = "ios",
  ios_app_id = "553834731",  # Candy Crush iOS
  countries = "US",
  end_dates = c("2024-06-30", "2025-06-30"),
  metrics = c("revenue", "downloads")
)

# Get metrics for specific date ranges
custom_periods <- st_ytd_metrics(
  os = "unified",
  unified_app_id = "5ba4585f539ce75b97db6bcb",
  countries = "WW",
  end_dates = as.Date(c("2024-03-31", "2024-09-30", "2025-03-31")),
  period_start = "01-01",  # Start from Jan 1 each year
  metrics = c("revenue", "downloads")
)

# Backward compatibility: using years (deprecated)
android_ytd <- st_ytd_metrics(
  os = "android",
  android_app_id = "com.king.candycrushsaga",
  countries = "US",
  years = c(2024, 2025),
  metrics = c("dau", "wau")
)
}

}
