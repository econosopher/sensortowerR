% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/st_ytd_metrics.R
\name{st_ytd_metrics}
\alias{st_ytd_metrics}
\title{Fetch Year-to-Date Metrics for Apps or Publishers}
\usage{
st_ytd_metrics(
  unified_app_id = NULL,
  ios_app_id = NULL,
  android_app_id = NULL,
  publisher_id = NULL,
  years = NULL,
  period_start = NULL,
  period_end = NULL,
  metrics = c("revenue", "downloads"),
  countries = "US",
  cache_dir = NULL,
  auth_token = Sys.getenv("SENSORTOWER_AUTH_TOKEN"),
  verbose = TRUE
)
}
\arguments{
\item{unified_app_id}{Character vector. Unified app ID(s) that work across iOS and Android platforms.}

\item{ios_app_id}{Character vector. iOS app ID(s) (optional).}

\item{android_app_id}{Character vector. Android package name(s) (optional).}

\item{publisher_id}{Character vector. Publisher ID(s) (alternative to app IDs).}

\item{years}{Integer vector. Years to fetch data for (e.g., c(2023, 2024, 2025)).
If NULL, uses current year only.}

\item{period_start}{Character string. Start date in "MM-DD" format (e.g., "02-01" for Feb 1).
If NULL, defaults to "01-01" (January 1).}

\item{period_end}{Character string. End date in "MM-DD" format (e.g., "02-28").
If NULL, defaults to last completed week (ending Saturday) of current year.}

\item{metrics}{Character vector. Metrics to fetch. Supports "revenue", "downloads", "dau", "wau", and "mau".
Default is both revenue and downloads. Note: DAU/WAU/MAU are calculated as averages for fair YoY comparisons.}

\item{countries}{Character vector. Country codes (default: "US").}

\item{cache_dir}{Character. Directory for caching API responses (optional).}

\item{auth_token}{Character string. Sensor Tower API token.}

\item{verbose}{Logical. Print progress messages.}
}
\value{
A tibble in tidy/long format with columns:
  - `entity_id`: App or publisher ID
  - `entity_name`: App or publisher name
  - `entity_type`: "app" or "publisher"
  - `year`: Year of the data
  - `date_start`: Start date of the period
  - `date_end`: End date of the period
  - `country`: Country code
  - `metric`: The metric name (e.g., "revenue", "downloads", "dau")
  - `value`: Metric value (units depend on metric type)
}
\description{
Fetches year-to-date metrics for apps or publishers across multiple years,
with intelligent batching and caching to minimize API calls.
}
\details{
This function intelligently handles various scenarios:

- **Default behavior**: Fetches YTD through last completed week (Saturday)
- **Custom periods**: Apply same calendar period to all specified years
- **Leap years**: Automatically handled (e.g., Feb 29 in leap years)
- **Entity detection**: Automatically determines if using app or publisher endpoints
- **Caching**: Reuses cached data for overlapping periods across years
- **Active Users Support**: DAU, WAU, and MAU are averaged across periods for meaningful comparisons
}
\examples{
\dontrun{
# Get YTD metrics including DAU, WAU, and MAU for a single app
ytd_metrics <- st_ytd_metrics(
  unified_app_id = "553834731",  # Candy Crush
  years = c(2023, 2024, 2025),
  metrics = c("revenue", "downloads", "dau", "wau", "mau")
)

# Get active user metrics only for multiple apps
active_user_metrics <- st_ytd_metrics(
  ios_app_id = c("553834731", "1195621598"),
  android_app_id = c("com.king.candycrushsaga", "com.playrix.homescapes"),
  years = 2025,
  metrics = c("dau", "wau")
)
}

}
