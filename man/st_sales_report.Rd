% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/st_sales_report.R
\name{st_sales_report}
\alias{st_sales_report}
\title{Fetch Sales Report Estimates}
\usage{
st_sales_report(
  app_ids = NULL,
  publisher_ids = NULL,
  os,
  countries,
  start_date,
  end_date,
  date_granularity,
  auth_token = NULL,
  auto_segment = TRUE,
  verbose = TRUE
)
}
\arguments{
\item{app_ids}{Character vector. App IDs to query. At least one app ID or publisher ID is required.
**Supports batch requests**: Pass multiple app IDs to fetch data for multiple apps in a single API call.}

\item{publisher_ids}{Character vector. Publisher IDs to query. Some Android publisher IDs contain commas.}

\item{os}{Character string. Required. Operating system: "ios" or "android".}

\item{countries}{Character vector. Country codes (e.g., c("US", "GB", "JP"), or "WW" for worldwide). Required.}

\item{start_date}{Date or character string. Start date in "YYYY-MM-DD" format. Required.}

\item{end_date}{Date or character string. End date in "YYYY-MM-DD" format. Required.}

\item{date_granularity}{Character string. One of "daily", "weekly", "monthly", "quarterly". Required.}

\item{auth_token}{Optional. Character string. Your Sensor Tower API token.}

\item{auto_segment}{Logical. If TRUE, automatically segments date ranges to avoid timeouts.}

\item{verbose}{Logical. If TRUE, prints progress messages.}
}
\value{
A tibble with download and revenue estimates.
}
\description{
Retrieves download and revenue estimates of apps by country and date.
Note: All revenues are returned in cents and need to be divided by 100 for dollar amounts.
}
\details{
The API has timeout limitations based on date granularity:
- daily: limit to 1 week segments
- weekly: limit to 3 month segments  
- monthly: limit to 1 year segments
- quarterly: limit to 2 year segments

When auto_segment = TRUE, the function automatically breaks up the date range
into appropriate segments and combines the results.

**Batch API Support**: This function supports fetching data for multiple apps
in a single API call. This significantly reduces the number of API requests needed
for multi-app analyses. For example, fetching daily data for 10 apps over 30 days
requires only 5 API calls instead of 50 when using batch requests.
}
\examples{
\dontrun{
# Get daily sales for a single app
sales <- st_sales_report(
  os = "ios",
  app_ids = "553834731",  # Candy Crush
  countries = c("US", "GB"),
  start_date = "2024-01-01",
  end_date = "2024-01-07",
  date_granularity = "daily"
)

# Batch request: Get data for multiple apps in one API call
batch_sales <- st_sales_report(
  os = "ios",
  app_ids = c("553834731", "1195621598", "1053012308"),  # Multiple apps!
  countries = "US",
  start_date = "2024-01-01",
  end_date = "2024-01-07",
  date_granularity = "daily"
)
# This makes 1 API call instead of 3!

# Get monthly sales with auto-segmentation
sales <- st_sales_report(
  os = "android",
  app_ids = c("553834731", "1621328561"),  # Batch request
  countries = "US",
  start_date = "2023-01-01",
  end_date = "2024-12-31",
  date_granularity = "monthly",
  auto_segment = TRUE
)
}

}
