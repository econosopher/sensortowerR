% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/st_batch_metrics.R
\name{st_batch_metrics}
\alias{st_batch_metrics}
\title{Batch Fetch Metrics for Multiple Apps}
\usage{
st_batch_metrics(
  os,
  app_list,
  metrics = c("revenue", "downloads"),
  date_range = list(start_date = Sys.Date() - 90, end_date = Sys.Date() - 1),
  countries,
  granularity,
  parallel = TRUE,
  cache_dir = NULL,
  verbose = TRUE,
  auth_token = Sys.getenv("SENSORTOWER_AUTH_TOKEN"),
  max_cores = 2,
  max_concurrent_requests = 2,
  retry = TRUE,
  max_retries = 3,
  publisher_ids = NULL
)
}
\arguments{
\item{os}{Character. Required. Operating system: "ios", "android", or "unified".
This determines which platform's data is returned for all apps.}

\item{app_list}{List or data frame containing app information. Can be:
- Character vector of app IDs
- Data frame with columns: app_id, app_name (optional), platform (optional)
- List of lists with app_id and optional metadata}

\item{metrics}{Character vector. Metrics to fetch. Supported values:
- "revenue" - App revenue estimates
- "downloads" - App download estimates  
- "dau" - Daily Active Users
- "wau" - Weekly Active Users
- "mau" - Monthly Active Users}

\item{date_range}{List with start_date and end_date, or "ytd" for year-to-date}

\item{countries}{Character vector. Country codes. Required.}

\item{granularity}{Character. Date granularity (default "monthly")}

\item{parallel}{Logical. Use parallel processing (default TRUE)}

\item{cache_dir}{Character. Directory for caching results (optional)}

\item{verbose}{Logical. Show progress messages (default TRUE)}

\item{auth_token}{Character string. Your Sensor Tower API authentication token.}
}
\value{
A tibble with all metrics for all apps, with columns:
  - original_id: The app ID as provided in the input
  - app_name: App name (if available)
  - app_id: The app ID used for the API call (based on OS parameter)
  - app_id_type: Type of app_id returned ("ios", "android", or "unified")
  - date, country, metric, value: Metric data
}
\description{
Efficiently fetch metrics for multiple apps by batching API calls and
automatically handling platform-specific requirements. The OS parameter
controls which platform's data is returned for all apps.
}
\details{
Active user metrics (DAU, WAU, MAU) are fetched using batch API calls for
efficiency. When fetching active users for many apps (>10), the function
will display a warning about potential rate limits.

The function automatically maps the granularity parameter to the appropriate
time period for active user metrics:
- DAU requires daily data
- WAU requires weekly data  
- MAU requires monthly data
}
\examples{
\dontrun{
# Simple usage with app IDs
apps <- c("553834731", "com.supercell.clashofclans", "5ba4585f539ce75b97db6bcb")
metrics <- st_batch_metrics(
  os = "unified",
  app_list = apps,
  metrics = c("revenue", "downloads"),
  date_range = list(start_date = "2025-01-01", end_date = "2025-06-30"),
  countries = "WW"
)

# With app metadata
app_df <- data.frame(
  app_id = c("553834731", "com.king.candycrushsaga"),
  app_name = c("Candy Crush iOS", "Candy Crush Android"),
  platform = c("ios", "android")
)
metrics <- st_batch_metrics(
  os = "unified",
  app_list = app_df,
  metrics = c("revenue", "downloads"),
  countries = "US"
)
}

}
