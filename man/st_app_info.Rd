% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/st_app_info.R
\name{st_app_info}
\alias{st_app_info}
\title{Fetch Unified App Information from Sensor Tower}
\usage{
st_app_info(
  term,
  app_store = "unified",
  entity_type = "app",
  limit = 20,
  auth_token = Sys.getenv("SENSORTOWER_AUTH_TOKEN"),
  return_all_fields = FALSE
)
}
\arguments{
\item{term}{Character string. The search term for the app or publisher.}

\item{app_store}{Character string. The app store to search.
Defaults to "unified".}

\item{entity_type}{Character string. The type of entity to search for.
Defaults to "app".}

\item{limit}{Numeric. The maximum number of results to return.
Defaults to 20.}

\item{auth_token}{Character string. Your Sensor Tower API authentication token.}

\item{return_all_fields}{Boolean. If TRUE, returns all available fields
from the API response. Defaults to FALSE, which returns only
`unified_app_id` and `unified_app_name`.}
}
\value{
A [tibble][tibble::tibble] with app information. If
  `return_all_fields` is FALSE (default), it contains `unified_app_id`,
  `unified_app_name`, and `category_details` (when available). If TRUE, it
  contains the full, unfiltered data. When category information is present
  in the API response, it's automatically enriched into a `category_details`
  list-column containing nested tibbles with platform, category_id, and 
  category_name for each app's categories.
}
\description{
This function retrieves information about apps from the Sensor Tower API
based on a search term. It targets the `/v1/\{app_store\}/search_entities`
endpoint and fetches app IDs and names for unified app entities.
}
\examples{
\dontrun{
# Fetch unified app info for "Clash of Clans"
app_info <- st_app_info(term = "Clash of Clans")
print(app_info)

# Access nested category details
if ("category_details" \%in\% names(app_info)) {
  print("Categories for first app:")
  print(app_info$category_details[[1]])
}
}

}
