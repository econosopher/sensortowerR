
R version 4.2.2 (2022-10-31) -- "Innocent and Trusting"
Copyright (C) 2022 The R Foundation for Statistical Computing
Platform: aarch64-apple-darwin20 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "sensortowerR"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> base::assign(".ExTimings", "sensortowerR-Ex.timings", pos = 'CheckExEnv')
> base::cat("name\tuser\tsystem\telapsed\n", file=base::get(".ExTimings", pos = 'CheckExEnv'))
> base::assign(".format_ptime",
+ function(x) {
+   if(!is.na(x[4L])) x[1L] <- x[1L] + x[4L]
+   if(!is.na(x[5L])) x[2L] <- x[2L] + x[5L]
+   options(OutDec = '.')
+   format(x[1L:3L], digits = 7L)
+ },
+ pos = 'CheckExEnv')
> 
> ### * </HEADER>
> library('sensortowerR')
> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> base::assign(".old_wd", base::getwd(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("st_app_info")
> ### * st_app_info
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: st_app_info
> ### Title: Fetch Unified App Information from Sensor Tower
> ### Aliases: st_app_info
> 
> ### ** Examples
> 
> ## Not run: 
> ##D # Ensure the SENSORTOWER_AUTH_TOKEN environment variable is set
> ##D # Sys.setenv(SENSORTOWER_AUTH_TOKEN = "your_auth_token_here")
> ##D 
> ##D # Fetch unified app info for "Clash of Clans"
> ##D app_info <- st_app_info(term = "Clash of Clans")
> ##D print(app_info)
> ##D 
> ##D # Fetch publisher info
> ##D # publisher_info <- st_app_info(
> ##D #   term = "Supercell", entity_type = "publisher"
> ##D # )
> ##D # print(publisher_info) # Note: returned columns might differ
> ## End(Not run)
> 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("st_app_info", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("st_categories")
> ### * st_categories
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: st_categories
> ### Title: List Available Sensor Tower Categories
> ### Aliases: st_categories
> 
> ### ** Examples
> 
> ## Not run: 
> ##D # Get all categories
> ##D all_cats <- st_categories() # Updated example call
> ##D print(head(all_cats))
> ##D 
> ##D # Get only iOS categories
> ##D ios_cats <- st_categories(platform = "ios") # Updated example call
> ##D print(head(ios_cats))
> ##D 
> ##D # Find the ID for Android "Music & Audio"
> ##D subset(st_categories("android"), category_name == "Music & Audio")
> ## End(Not run)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("st_categories", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("st_metrics")
> ### * st_metrics
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: st_metrics
> ### Title: Fetch Sensor Tower Metrics for a Unified App
> ### Aliases: st_metrics
> 
> ### ** Examples
> 
> ## Not run: 
> ##D # Ensure SENSORTOWER_AUTH_TOKEN is set in your environment
> ##D # Sys.setenv(SENSORTOWER_AUTH_TOKEN = "your_secure_auth_token_here")
> ##D 
> ##D # Define the unified app ID (use a real, valid ID)
> ##D unified_app_id <- "YOUR_VALID_UNIFIED_APP_ID"
> ##D 
> ##D # Define the date range
> ##D start_date <- Sys.Date() - 30
> ##D end_date <- Sys.Date() - 1
> ##D 
> ##D # Fetch the metrics
> ##D metrics <- st_metrics(
> ##D   unified_app_id = unified_app_id,
> ##D   start_date = start_date,
> ##D   end_date = end_date
> ##D )
> ##D 
> ##D # View the metrics
> ##D print(metrics)
> ##D head(metrics)
> ## End(Not run)
> 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("st_metrics", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("st_publisher_apps")
> ### * st_publisher_apps
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: st_publisher_apps
> ### Title: Get All Apps from a Publisher
> ### Aliases: st_publisher_apps
> 
> ### ** Examples
> 
> ## Not run: 
> ##D # Ensure SENSORTOWER_AUTH_TOKEN is set in your environment
> ##D # Sys.setenv(SENSORTOWER_AUTH_TOKEN = "your_secure_auth_token_here")
> ##D 
> ##D # Define the publisher ID (use a real ID)
> ##D publisher_id <- "YOUR_PUBLISHER_ID_HERE"
> ##D 
> ##D # Fetch the publisher's apps
> ##D apps_list <- st_publisher_apps(publisher_id = publisher_id)
> ##D 
> ##D # View the results
> ##D print(apps_list)
> ## End(Not run)
> 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("st_publisher_apps", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("st_top_active_users")
> ### * st_top_active_users
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: st_top_active_users
> ### Title: Fetch Top Apps by Active User Estimates
> ### Aliases: st_top_active_users
> 
> ### ** Examples
> 
> ## Not run: 
> ##D # Ensure SENSORTOWER_AUTH_TOKEN environment variable is set
> ##D # Sys.setenv(SENSORTOWER_AUTH_TOKEN = "YOUR_TOKEN_HERE")
> ##D 
> ##D # Example 1: Top iOS Social apps by MAU
> ##D top_ios_social_mau <- st_top_active_users(
> ##D   os = "ios",
> ##D   comparison_attribute = "absolute",
> ##D   time_range = "month",
> ##D   measure = "MAU",
> ##D   date = "2023-10-01",
> ##D   category = 6016,
> ##D   regions = c("US", "GB"),
> ##D   limit = 10
> ##D )
> ##D print(top_ios_social_mau)
> ## End(Not run)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("st_top_active_users", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("st_top_sales")
> ### * st_top_sales
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: st_top_sales
> ### Title: Fetch Top Apps by Downloads and Revenue Estimates
> ### Aliases: st_top_sales
> 
> ### ** Examples
> 
> ## Not run: 
> ##D # Ensure SENSORTOWER_AUTH_TOKEN environment variable is set
> ##D # Sys.setenv(SENSORTOWER_AUTH_TOKEN = "YOUR_TOKEN_HERE")
> ##D 
> ##D # Get top 10 iOS Games by absolute downloads for the month of Oct 2023 in US
> ##D top_ios_games_dl <- st_top_sales(
> ##D   os = "ios",
> ##D   comparison_attribute = "absolute",
> ##D   time_range = "month",
> ##D   measure = "units",
> ##D   date = "2023-10-01",
> ##D   category = 6000,      # iOS Games category ID
> ##D   regions = "US",       # Region is required
> ##D   limit = 10
> ##D )
> ##D 
> ##D print(top_ios_games_dl)
> ##D 
> ##D # Get top 5 Android Finance apps by revenue delta for Q4 2023 worldwide
> ##D top_android_finance_rev <- st_top_sales(
> ##D   os = "android",
> ##D   comparison_attribute = "delta",
> ##D   time_range = "quarter",
> ##D   measure = "revenue",
> ##D   date = "2023-10-01",
> ##D   category = "FINANCE",    # Android Category ID might be a string
> ##D   regions = "WW",          # Worldwide region code is required
> ##D   limit = 5
> ##D )
> ##D print(top_android_finance_rev)
> ## End(Not run)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("st_top_sales", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> ### * <FOOTER>
> ###
> cleanEx()
> options(digits = 7L)
> base::cat("Time elapsed: ", proc.time() - base::get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  0.32 0.02 0.349 0 0 
> grDevices::dev.off()
null device 
          1 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')
